--- a/Common/src/main/java/com/hypherionmc/craterlib/client/gui/config/CraterConfigScreen.java
+++ b/Common/src/main/java/com/hypherionmc/craterlib/client/gui/config/CraterConfigScreen.java
@@ -179,6 +179,7 @@
     @Override
     public void render(@NotNull GuiGraphics matrices, int mouseX, int mouseY, float delta) {
         overlayBackground(matrices.pose(), TOP, height - BOTTOM, 32);
+
         renderScrollBar();
 
         matrices.pose().pushPose();
@@ -187,9 +188,8 @@
         overlayBackground(matrices.pose(), height - BOTTOM, height, 64);
         renderShadow(matrices.pose());
         matrices.drawCenteredString(font, getTitle(), width / 2, 9, 0xFFFFFF);
-        matrices.pose().popPose();
-
         super.render(matrices, mouseX, mouseY, delta);
+        matrices.pose().popPose();
 
         int y = (int) (TOP + 4 - Math.round(scrollerAmount));
         for (Option<?> option : options) {
@@ -268,9 +268,9 @@
     protected void overlayBackground(Matrix4f matrix, int minX, int minY, int maxX, int maxY, int red, int green, int blue, int startAlpha, int endAlpha) {
         Tesselator tesselator = Tesselator.getInstance();
         BufferBuilder buffer = tesselator.getBuilder();
-        RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
-        RenderSystem.setShaderTexture(0, Screen.MENU_BACKGROUND);
+        RenderSystem.setShaderTexture(0, Screen.BACKGROUND_LOCATION);
         RenderSystem.setShaderColor(1.0f, 1.0f, 1.0f, 1.0f);
+        RenderSystem.setShader(GameRenderer::getPositionTexColorShader);
         buffer.begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX_COLOR);
         buffer.vertex(matrix, minX, maxY, 0.0F).uv(minX / 32.0F, maxY / 32.0F).color(red, green, blue, endAlpha).endVertex();
         buffer.vertex(matrix, maxX, maxY, 0.0F).uv(maxX / 32.0F, maxY / 32.0F).color(red, green, blue, endAlpha).endVertex();
@@ -334,12 +334,12 @@
     }
 
     @Override
-    public boolean mouseScrolled(double d, double e, double f, double g) {
+    public boolean mouseScrolled(double d, double e, double f) {
         if (e >= TOP && e <= height - BOTTOM) {
             scrollerAmount = Mth.clamp(scrollerAmount - f * 16.0D, 0, scrollHeight());
             return true;
         }
-        return super.mouseScrolled(d, e, f, g);
+        return super.mouseScrolled(d, e, f);
     }
 
     @Override
