--- a/Common/src/main/java/com/hypherionmc/craterlib/utils/ChatUtils.java
+++ b/Common/src/main/java/com/hypherionmc/craterlib/utils/ChatUtils.java
@@ -1,7 +1,5 @@
 package com.hypherionmc.craterlib.utils;
 
-import com.hypherionmc.craterlib.core.platform.CommonPlatform;
-import com.hypherionmc.craterlib.core.platform.ModloaderEnvironment;
 import com.hypherionmc.craterlib.nojang.resources.ResourceIdentifier;
 import me.hypherionmc.mcdiscordformatter.discord.DiscordSerializer;
 import me.hypherionmc.mcdiscordformatter.minecraft.MinecraftSerializer;
@@ -11,11 +9,10 @@
 import net.minecraft.ChatFormatting;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
-import net.minecraft.client.Minecraft;
-import net.minecraft.core.HolderLookup;
-import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.Style;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.network.chat.TranslatableComponent;
 
 public class ChatUtils {
 
@@ -25,30 +22,20 @@
 
     public static Component adventureToMojang(net.kyori.adventure.text.Component inComponent) {
         final String serialised = adventureSerializer.serialize(inComponent);
-        return Component.Serializer.fromJson(serialised, getRegistryLookup());
+        return Component.Serializer.fromJson(serialised);
     }
 
     public static net.kyori.adventure.text.Component mojangToAdventure(Component inComponent) {
-        final String serialised = Component.Serializer.toJson(inComponent, getRegistryLookup());
+        final String serialised = Component.Serializer.toJson(inComponent);
         return adventureSerializer.deserialize(serialised);
     }
 
-    private static HolderLookup.Provider getRegistryLookup() {
-        if (ModloaderEnvironment.INSTANCE.getEnvironment().isClient() && Minecraft.getInstance().level != null)
-            return Minecraft.getInstance().level.registryAccess();
-
-        if (ModloaderEnvironment.INSTANCE.getEnvironment().isServer() && CommonPlatform.INSTANCE.getMCServer() != null)
-            return CommonPlatform.INSTANCE.getMCServer().toMojang().registryAccess();
-
-        return RegistryAccess.EMPTY;
-    }
-
     // Some text components contain duplicate text, resulting in duplicate messages
     // sent back to discord. This should help fix those issues
     public static Component safeCopy(Component inComponent) {
         String value = inComponent.getString();
         Style style = inComponent.getStyle();
-        return Component.literal(value).withStyle(style);
+        return new TextComponent(value).withStyle(style);
     }
 
     public static String strip(String inString, String... toStrip) {
@@ -77,7 +64,7 @@
     }
 
     public static net.kyori.adventure.text.Component resolve(String component, boolean formatted) {
-        Component returnVal = Component.literal(component);
+        Component returnVal = new TextComponent(component);
         if (formatted) {
             returnVal = MinecraftSerializer.INSTANCE.serialize(component);
         }
@@ -105,7 +92,7 @@
         if (identifier == null)
             return net.kyori.adventure.text.Component.text("Unknown");
 
-        return mojangToAdventure(Component.translatable(Util.makeDescriptionId("biome", identifier.toMojang())));
+        return mojangToAdventure(new TranslatableComponent(Util.makeDescriptionId("biome", identifier.toMojang())));
     }
 
     public static net.kyori.adventure.text.Component format(String value) {
